#lang rhombus

import:
  lib("racket/base.rkt") as base
  lib("racket/future.rkt") as future
  piper/utils only:
    merge
    filter
    append

export:
  par_map
  par_filter

fun par_map (lst, fn):
  def ftr_lst = lst.map(fun (value): future.future(fun (): fn(value)))
  def rslt_lst = ftr_lst.map(fun (ftr): future.touch(ftr))
  rslt_lst

fun par_filter (lst, pred):
  def ftr_lst = lst.map(fun (value): future.future(fun (): pred(value)))
  def bool_lst = ftr_lst.map(fun (ftr): future.touch(ftr))
  def merged_lst = utils.merge(lst, bool_lst)
  def red_lst = utils.filter(merged_lst, fun (x): x[1])
  def mutable rslt_lst = []
  cond
  | lst is_a List:
      rslt_lst := []
  | lst is_a PairList:
      rslt_lst := PairList()
  red_lst.for_each(fun (x): rslt_lst := utils.append(rslt_lst, x[0]))
  rslt_lst
  